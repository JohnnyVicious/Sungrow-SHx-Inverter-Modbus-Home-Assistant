# Home Assistant Sungrow inverter integration
#
# this is a development version which breaks with the previous API!
#
# DO NOT USE THIS VERSION
#
# This version is meant to be a base for disussion and trying to find better ways
#
# Discussion here https://discord.gg/ZvYBejFkm2 , channel "Experimental"
#
# https://github.com/mkaiser/Sungrow-SHx-Inverter-Modbus-Home-Assistant/tree/experimental
#
# by Martin Kaiser
# last update: 2023-10-12

modbus:
# inserted from modbus_device_sg1.yaml
  - name: Sungrow_Inverter_SG1
    type: tcp
    host: !secret sungrow_sg1_modbus_host_ip
    port: !secret sungrow_sg1_modbus_port
    retries: 10
    sensors:

# inserted from generic_battery_sensors.yaml

      - name: SG1 BDC rated power
        unique_id: uid_sg1_bdc_rated_power
        slave: !secret sungrow_sg1_modbus_slave
        address: 5627 # reg 5628
        input_type: input
        data_type: uint16
        unit_of_measurement: "W"
        device_class: power
        state_class: measurement
        scale: 100
        scan_interval: !secret sungrow_scan_interval_rare

      - name: SG1 BMS max. charging current
        unique_id: uid_sg1_bms_max_charging_current
        slave: !secret sungrow_sg1_modbus_slave
        address: 5634 # reg 5635
        input_type: input
        data_type: uint16
        precision: 0
        unit_of_measurement: A
        device_class: Current
        scale: 1
        scan_interval: !secret sungrow_scan_interval_mid

      - name: SG1 BMS max. discharging current
        unique_id: uid_sg1_bms_max_discharging_current
        slave: !secret sungrow_sg1_modbus_slave
        address: 5635 # reg 5636
        input_type: input
        data_type: uint16
        precision: 0
        unit_of_measurement: A
        device_class: Current
        scale: 1
        scan_interval: !secret sungrow_scan_interval_mid
      #https://www.photovoltaikforum.com/thread/166134-daten-lesen-vom-sungrow-wechselrichtern-modbus/?pageNo=13
      #Phase A Backup Power: 5723 S16 W (Backup Leistung Phase A)
      #Phase B Backup Power: 5724 S16 W (Backup Leistung Phase B)
      #Phase C Backup Power: 5725 S16 W (Backup Leistung Phase C)
      - name: SG1 Total backup power
        slave: !secret sungrow_sg1_modbus_slave
        unique_id: uid_sg1_total_backup_power
        address: 5725 # reg 5726
        input_type: input
        data_type: int16
        precision: 0
        unit_of_measurement: W
        device_class: power
        state_class: measurement
        scale: 1
        scan_interval: !secret sungrow_scan_interval_fast

      - name: SG1 Backup phase A power
        unique_id: uid_sg1_backup_phase_a_power
        slave: !secret sungrow_sg1_modbus_slave
        address: 5722 # reg 5723
        input_type: input
        data_type: int16
        precision: 0
        unit_of_measurement: W
        device_class: power
        state_class: measurement
        scale: 1
        scan_interval: !secret sungrow_scan_interval_fast

      - name: SG1 Backup phase B power
        unique_id: uid_sg1_backup_phase_b_power
        slave: !secret sungrow_sg1_modbus_slave
        address: 5723 # reg 5724
        input_type: input
        data_type: int16
        precision: 0
        unit_of_measurement: W
        device_class: power
        state_class: measurement
        scale: 1
        scan_interval: !secret sungrow_scan_interval_fast

      - name: SG1 Backup phase C power
        unique_id: uid_sg1_backup_phase_c_power
        slave: !secret sungrow_sg1_modbus_slave
        address: 5724 # reg 5725
        input_type: input
        data_type: int16
        precision: 0
        unit_of_measurement: W
        device_class: power
        state_class: measurement
        scale: 1
        scan_interval: !secret sungrow_scan_interval_fast        

      - name: SG1 Daily battery charge from PV
        unique_id: uid_sg1_daily_battery_charge_from_pv
        slave: !secret sungrow_sg1_modbus_slave
        address: 13011 # reg 13012
        input_type: input
        data_type: uint16
        precision: 1
        unit_of_measurement: kWh
        device_class: energy
        state_class: total_increasing
        scale: 0.1
        scan_interval: !secret sungrow_scan_interval_rare

      - name: SG1 Total battery charge from PV
        unique_id: uid_sg1_total_battery_charge_from_pv
        slave: !secret sungrow_sg1_modbus_slave
        address: 13012 # reg 13013
        input_type: input
        data_type: uint32
        swap: word
        precision: 1
        unit_of_measurement: kWh
        device_class: energy
        state_class: total_increasing
        scale: 0.1
        scan_interval: !secret sungrow_scan_interval_rare        
        
        
      - name: SG1 Battery voltage
        unique_id: uid_sg1_battery_voltage
        slave: !secret sungrow_sg1_modbus_slave
        address: 13019 # reg 13020
        input_type: input
        data_type: uint16
        precision: 0
        unit_of_measurement: V
        device_class: Voltage
        scale: 0.1
        scan_interval: !secret sungrow_scan_interval_fast

      - name: SG1 Battery current
        unique_id: uid_sg1_battery_current
        slave: !secret sungrow_sg1_modbus_slave
        address: 13020 # reg 13021
        input_type: input
        data_type: uint16
        precision: 1
        unit_of_measurement: A
        device_class: Current
        scale: 0.1
        scan_interval: !secret sungrow_scan_interval_fast

      # always positive battery power
      # use binary_sensor.battery_charging | discharging to retrieve the direction of the energy flow
      - name: SG1 Battery power raw
        unique_id: uid_sg1_battery_power_raw
        slave: !secret sungrow_sg1_modbus_slave
        address: 13021 # reg 13022
        input_type: input
        data_type: uint16
        precision: 0
        unit_of_measurement: W
        device_class: power
        state_class: measurement
        scale: 1
        scan_interval: !secret sungrow_scan_interval_fast

      - name: SG1 Battery level
        unique_id: uid_sg1_battery_level
        slave: !secret sungrow_sg1_modbus_slave
        address: 13022 # reg 13023
        input_type: input
        data_type: uint16
        precision: 1
        unit_of_measurement: "%"
        device_class: battery
        state_class: measurement
        scale: 0.1
        scan_interval: !secret sungrow_scan_interval_mid

      - name: SG1 Battery state of health
        unique_id: uid_sg1_battery_state_of_health
        slave: !secret sungrow_sg1_modbus_slave
        address: 13023 # reg 13024
        input_type: input
        data_type: uint16
        precision: 0
        unit_of_measurement: "%"
        state_class: measurement
        scale: 0.1
        scan_interval: !secret sungrow_scan_interval_rare

      - name: SG1 Battery temperature
        unique_id: uid_sg1_battery_temperature
        slave: !secret sungrow_sg1_modbus_slave
        address: 13024 # reg 13025
        input_type: input
        data_type: int16
        precision: 1
        unit_of_measurement: Â°C
        device_class: Temperature
        scale: 0.1
        scan_interval: !secret sungrow_scan_interval_mid

      - name: SG1 Daily battery discharge
        unique_id: uid_sg1_daily_battery_discharge
        slave: !secret sungrow_sg1_modbus_slave
        address: 13025 # reg 13026
        input_type: input
        data_type: uint16
        precision: 1
        unit_of_measurement: kWh
        device_class: energy
        state_class: total_increasing
        scale: 0.1
        scan_interval: !secret sungrow_scan_interval_rare

      - name: SG1 Total battery discharge
        unique_id: uid_sg1_total_battery_discharge
        slave: !secret sungrow_sg1_modbus_slave
        address: 13026 # reg 13027
        input_type: input
        data_type: uint32
        swap: word
        precision: 1
        unit_of_measurement: kWh
        device_class: energy
        state_class: total_increasing
        scale: 0.1
        scan_interval: !secret sungrow_scan_interval_rare
        
        
      - name: SG1 Daily battery charge
        unique_id: uid_sg1_daily_battery_charge
        slave: !secret sungrow_sg1_modbus_slave
        address: 13039 # reg 13040
        input_type: input
        data_type: uint16
        precision: 1
        unit_of_measurement: kWh
        device_class: energy
        state_class: total_increasing
        scale: 0.1
        scan_interval: !secret sungrow_scan_interval_rare

      - name: SG1 Total battery charge
        unique_id: uid_sg1_total_battery_charge
        slave: !secret sungrow_sg1_modbus_slave
        address: 13040 # reg 13041
        input_type: input
        data_type: uint32
        swap: word
        precision: 1
        unit_of_measurement: kWh
        device_class: energy
        state_class: total_increasing
        scale: 0.1
        scan_interval: !secret sungrow_scan_interval_rare        
        

      - name: SG1 Battery forced charge discharge mode raw
        unique_id: uid_sg1_battery_forced_charge_discharge_mode_raw
        slave: !secret sungrow_sg1_modbus_slave
        address: 13050 # reg 13051
        input_type: holding
        data_type: uint16
        precision: 0
        scan_interval: !secret sungrow_scan_interval_fast

      - name: SG1 Battery forced charge discharge power
        unique_id: uid_sg1_battery_forced_charge_discharge_power
        slave: !secret sungrow_sg1_modbus_slave
        address: 13051 # reg 13052
        input_type: holding
        data_type: uint16
        precision: 0
        # datasheet says:
        # 0 to 5000 W for SH*K-*
        # 0 to 100 % for SH*.0RT
        # for my SH10RT it is set in Watt, not in %
        unit_of_measurement: W
        device_class: power
        state_class: measurement
        scan_interval: !secret sungrow_scan_interval_fast

      - name: SG1 Max SoC
        unique_id: uid_sg1_max_soc
        slave: !secret sungrow_sg1_modbus_slave
        address: 13057 # reg 13058
        input_type: holding
        data_type: uint16
        precision: 1
        unit_of_measurement: "%"
        device_class: battery
        state_class: measurement
        scale: 0.1
        scan_interval: !secret sungrow_scan_interval_fast

      - name: SG1 Min SoC
        unique_id: uid_sg1_min_soc
        slave: !secret sungrow_sg1_modbus_slave
        address: 13058 # reg 13059
        input_type: holding
        data_type: uint16
        precision: 1
        unit_of_measurement: "%"
        device_class: battery
        state_class: measurement
        scale: 0.1
        scan_interval: !secret sungrow_scan_interval_fast

      - name: SG1 Export power limit
        unique_id: uid_sg1_export_power_limit
        slave: !secret sungrow_sg1_modbus_slave
        address: 13073 # reg 13074
        input_type: holding
        data_type: uint16
        precision: 0
        unit_of_measurement: "W"
        device_class: power
        state_class: measurement
        scale: 1
        scan_interval: !secret sungrow_scan_interval_fast

      - name: SG1 Export power limit mode raw
        unique_id: uid_sg1_export_power_limit_mode_raw
        slave: !secret sungrow_sg1_modbus_slave
        address: 13086 # reg 13087
        input_type: holding
        data_type: uint16
        precision: 0
        scan_interval: !secret sungrow_scan_interval_fast

      - name: SG1 Reserved SoC for backup
        unique_id: uid_sg1_reserved_soc_for_backup
        slave: !secret sungrow_sg1_modbus_slave
        address: 13099 # reg 13100
        input_type: holding
        data_type: uint16
        unit_of_measurement: "%"
        device_class: battery
        state_class: measurement
        scale: 1
        scan_interval: !secret sungrow_scan_interval_fast

      #undocumented sensors (reverse engineered by some guys of photovoltaikforum.com and forum.iobroker.net )
      - name: SG1 Battery max charge power
        unique_id: uid_sg1_battery_max_charge_power
        slave: !secret sungrow_sg1_modbus_slave
        address: 33046 # reg 33047
        input_type: holding
        data_type: uint16
        precision: 0
        unit_of_measurement: W
        device_class: power
        state_class: measurement
        scale: 10
        scan_interval: !secret sungrow_scan_interval_fast

      - name: SG1 Battery max discharge power
        unique_id: uid_sg1_battery_max_discharge_power
        slave: !secret sungrow_sg1_modbus_slave
        address: 33047 # reg 33048
        input_type: holding
        data_type: uint16
        precision: 0
        unit_of_measurement: W
        device_class: power
        state_class: measurement
        scale: 10
        scan_interval: !secret sungrow_scan_interval_fast

      - name: SG1 Battery capacity
        unique_id: uid_sg1_battery_capacity
        slave: !secret sungrow_sg1_modbus_slave
        address: 33048 # reg 33049
        input_type: holding
        data_type: uint16
        unit_of_measurement: kWh
        device_class: energy
        scale: 0.01
        scan_interval: !secret sungrow_scan_interval_rare

      - name: SG1 Battery charging start power
        unique_id: uid_sg1_battery_charging_start_power
        slave: !secret sungrow_sg1_modbus_slave
        address: 33148 # reg 33149
        input_type: holding
        data_type: uint16
        precision: 0
        unit_of_measurement: W
        device_class: power
        state_class: measurement
        scale: 10
        scan_interval: !secret sungrow_scan_interval_fast

      - name: SG1 Battery discharging start power
        unique_id: uid_sg1_battery_discharging_start_power
        slave: !secret sungrow_sg1_modbus_slave
        address: 33149 # reg 33150
        input_type: holding
        data_type: uint16
        precision: 0
        unit_of_measurement: W
        device_class: power
        state_class: measurement
        scale: 10
        scan_interval: !secret sungrow_scan_interval_fast
# inserted from basic_sensors_sh.yaml
      - name: SG1 System state
        unique_id: uid_sg1_system_state
        slave: !secret sungrow_sg1_modbus_slave
        address: 12999 # reg 13000
        input_type: input
        data_type: uint16
        precision: 0
        scale: 1
        scan_interval: !secret sungrow_scan_interval_fast

      # register running state is not available for certain SH*RS inverters
      # template sensors are used to determine the states based on other sensors
      - name: SG1 Running state
        unique_id: uid_sg1_running_state
        slave: !secret sungrow_sg1_modbus_slave
        address: 13000 # reg 13001
        input_type: input
        data_type: uint16
        precision: 0
        scale: 1
        scan_interval: !secret sungrow_scan_interval_fast        
        
      - name: SG1 Daily PV generation
        unique_id: uid_sg1_daily_pv_generation
        slave: !secret sungrow_sg1_modbus_slave
        address: 13001 # reg 13002
        input_type: input
        data_type: uint16
        precision: 1
        unit_of_measurement: kWh
        device_class: energy
        state_class: total_increasing
        scale: 0.1
        scan_interval: !secret sungrow_scan_interval_rare

      - name: SG1 Total PV generation
        unique_id: uid_sg1_total_pv_generation
        slave: !secret sungrow_sg1_modbus_slave
        address: 13002 # reg 13003
        input_type: input
        data_type: uint32
        swap: word
        precision: 1
        unit_of_measurement: kWh
        device_class: energy
        state_class: total_increasing
        scale: 0.1
        scan_interval: !secret sungrow_scan_interval_rare


# inserted from basic_sensors.yaml
      - name: SG1 Device type code
        unique_id: uid_sg1_dev_code
        slave: !secret sungrow_sg1_modbus_slave
        address: 4999 # reg 5000
        input_type: input
        data_type: uint16
        scan_interval: !secret sungrow_scan_interval_rare
        
      - name: SG1 Inverter temperature
        unique_id: uid_sg1_inverter_temperature
        slave: !secret sungrow_sg1_modbus_slave
        address: 5007 # reg 5008
        input_type: input
        data_type: int16
        precision: 1
        unit_of_measurement: Â°C
        device_class: Temperature
        scale: 0.1
        scan_interval: !secret sungrow_scan_interval_fast        
        
      - name: SG1 MPPT1 voltage
        unique_id: uid_sg1_mppt1_voltage
        slave: !secret sungrow_sg1_modbus_slave
        address: 5010 # reg 5011
        input_type: input
        data_type: uint16
        precision: 1
        unit_of_measurement: V
        device_class: Voltage
        scale: 0.1
        scan_interval: !secret sungrow_scan_interval_fast

      - name: SG1 MPPT1 current
        unique_id: uid_sg1_mppt1_current
        slave: !secret sungrow_sg1_modbus_slave
        address: 5011 # reg 5012
        input_type: input
        data_type: uint16
        precision: 2
        unit_of_measurement: A
        device_class: Current
        scale: 0.1
        scan_interval: !secret sungrow_scan_interval_fast

      - name: SG1 MPPT2 voltage
        unique_id: uid_sg1_mppt2_voltage
        slave: !secret sungrow_sg1_modbus_slave
        address: 5012 # reg 5013
        input_type: input
        data_type: uint16
        precision: 1
        unit_of_measurement: V
        device_class: Voltage
        scale: 0.1
        scan_interval: !secret sungrow_scan_interval_fast

      - name: SG1 MPPT2 current
        unique_id: uid_sg1_mppt2_current
        slave: !secret sungrow_sg1_modbus_slave
        address: 5013 # reg 5014
        input_type: input
        data_type: uint16
        precision: 2
        unit_of_measurement: A
        device_class: Current
        scale: 0.1
        scan_interval: !secret sungrow_scan_interval_fast

      - name: SG1 Total DC power
        unique_id: uid_sg1_total_dc_power
        slave: !secret sungrow_sg1_modbus_slave
        address: 5016 # reg 5017
        input_type: input
        data_type: uint32
        swap: word
        precision: 0
        unit_of_measurement: W
        device_class: power
        state_class: measurement
        scale: 1
        scan_interval: !secret sungrow_scan_interval_fast

      - name: SG1 Daily exported energy from PV
        unique_id: uid_sg1_daily_exported_energy_from_PV
        slave: !secret sungrow_sg1_modbus_slave
        address: 13004 # reg 13005
        input_type: input
        data_type: uint16
        precision: 1
        unit_of_measurement: kWh
        device_class: energy
        state_class: total_increasing
        scale: 0.1
        scan_interval: !secret sungrow_scan_interval_rare

      - name: SG1 Total exported energy from PV
        unique_id: uid_sg1_total_exported_energy_from_pv
        slave: !secret sungrow_sg1_modbus_slave
        address: 13005 # reg 13006
        input_type: input
        data_type: uint32
        swap: word
        precision: 1
        unit_of_measurement: kWh
        device_class: energy
        state_class: total
        scale: 0.1
        scan_interval: !secret sungrow_scan_interval_rare

      - name: SG1 Load power
        unique_id: uid_sg1_load_power
        slave: !secret sungrow_sg1_modbus_slave
        address: 13007 # reg 13008
        input_type: input
        data_type: int32
        swap: word
        precision: 0
        unit_of_measurement: W
        device_class: power
        state_class: measurement
        scale: 1
        scan_interval: !secret sungrow_scan_interval_fast

      # this value returns a positive value when exporting and a negative value when importing power
      - name: SG1 Export power raw
        unique_id: uid_sg1_battery_export_power_raw
        slave: !secret sungrow_sg1_modbus_slave
        address: 13009 # reg 13010
        input_type: input
        data_type: int32
        swap: word
        precision: 0
        unit_of_measurement: W
        device_class: power
        state_class: measurement
        scale: 1
        scan_interval: !secret sungrow_scan_interval_fast        
        
      - name: SG1 Daily direct energy consumption
        unique_id: uid_sg1_daily_direct_energy_consumption
        slave: !secret sungrow_sg1_modbus_slave
        address: 13016 # reg 13017
        input_type: input
        data_type: uint16
        precision: 1
        unit_of_measurement: kWh
        device_class: energy
        state_class: total_increasing
        scale: 0.1
        scan_interval: !secret sungrow_scan_interval_rare

      - name: SG1 Total direct energy consumption
        unique_id: uid_sg1_total_direct_energy_consumption
        slave: !secret sungrow_sg1_modbus_slave
        address: 13017 # reg 13018
        input_type: input
        data_type: uint32
        swap: word
        precision: 1
        unit_of_measurement: kWh
        device_class: energy
        state_class: total_increasing
        scale: 0.1
        scan_interval: !secret sungrow_scan_interval_rare        
        
      - name: SG1 Daily imported energy
        unique_id: uid_sg1_daily_imported_energy
        slave: !secret sungrow_sg1_modbus_slave
        address: 13035 # reg 13036
        input_type: input
        data_type: uint16
        precision: 1
        unit_of_measurement: kWh
        device_class: energy
        state_class: total_increasing
        scale: 0.1
        scan_interval: !secret sungrow_scan_interval_rare

      - name: SG1 Total imported energy
        unique_id: uid_sg1_total_imported_energy
        slave: !secret sungrow_sg1_modbus_slave
        address: 13036 # reg 13037
        input_type: input
        data_type: uint32
        swap: word
        precision: 1
        unit_of_measurement: kWh
        device_class: energy
        state_class: total_increasing
        scale: 0.1
        scan_interval: !secret sungrow_scan_interval_rare        
        
      - name: SG1 Daily exported energy
        unique_id: uid_sg1_daily_exported_energy
        slave: !secret sungrow_sg1_modbus_slave
        address: 13044 # reg 13045
        input_type: input
        data_type: uint16
        precision: 1
        unit_of_measurement: kWh
        device_class: energy
        state_class: total_increasing
        scale: 0.1
        scan_interval: !secret sungrow_scan_interval_rare

      - name: SG1 Total exported energy
        unique_id: uid_sg1_total_exported_energy
        slave: !secret sungrow_sg1_modbus_slave
        address: 13045 # reg 13046
        input_type: input
        data_type: uint32
        swap: word
        precision: 1
        unit_of_measurement: kWh
        device_class: energy
        state_class: total_increasing
        scale: 0.1
        scan_interval: !secret sungrow_scan_interval_rare        
        
      - name: SG1 Inverter start stop
        unique_id: uid_sg1_inverter_start_stop
        slave: !secret sungrow_sg1_modbus_slave
        address: 12999 # reg 13000
        input_type: holding
        data_type: uint16
        precision: 0
        scan_interval: !secret sungrow_scan_interval_fast

      - name: SG1 EMS mode selection raw
        unique_id: uid_sg1_ems_mode_selection_raw
        slave: !secret sungrow_sg1_modbus_slave
        address: 13049 # reg 13050
        input_type: holding
        data_type: uint16
        scan_interval: !secret sungrow_scan_interval_fast





template:
  - binary_sensor:
# inserted from generic_battery_template_binary_sensor.yaml
      - name: SG1 Battery charging
        unique_id: uid_sg1_battery_charging
        availability: >-
          {{states('sensor.sg1_running_state')|is_number or
            (states('sensor.sg1_ems_mode_selection_raw')|is_number and
            states('sensor.sg1_battery_forced_charge_discharge_mode_raw')|is_number and
            states('sensor.sg1_battery_power_raw')|is_number and
            states('sensor.sg1_total_dc_power')|is_number and
            states('sensor.sg1_load_power')|is_number )
          }}
        state: >-
          {% if states('sensor.sg1_running_state')|is_number %}
            {# use available sensor running_state #}
            {% if states('sensor.sg1_running_state')|int(default=0)|bitwise_and(0x2) > 0 %}
              on
            {% else %}
              off
            {% endif %}
          {% else %}
            {# workaround for SH*RS inverters without working running_state #}
            {% if (states('sensor.sg1_ems_mode_selection') ) == "Forced mode" %}
              {# EMS forced mode #}
              {% if (states('sensor.sg1_battery_forced_charge_discharge_mode') == "Forced charge") %}
                {# in mode Forced charge #}
                {% if (states('sensor.sg1_battery_power_raw')|int > 0 ) %}
                  {# power flow from/to battery #}
                  on
                {% else %}
                  {# no power flow from/to battery #}
                  off
                {% endif %}
              {% else %}
                {# in EMS mode, but not in mode Forced charge #}
                off
              {% endif %}
            {% else %}
              {# not in EMS forced mode, assuming self consumption mode #}
              {% if states('sensor.sg1_total_dc_power')|int > states('sensor.sg1_load_power')|int %}
                {# more power generated than consumed. assuming battery charging #}
                on
              {% else %}
                off
              {% endif %}
            {% endif %}
          {% endif %}

      - name: SG1 Battery charging delay
        unique_id: uid_sg1_battery_charging_delay
        availability: "{{states('sensor.uid_sg1_battery_charging_delay')|is_number }}"
        state: "{{ sg1_battery_charging_delay }}"

      - name: SG1 Battery discharging
        unique_id: uid_sg1_battery_discharging
        availability: >-
          {{states('sensor.sg1_running_state')|is_number or
            (states('sensor.sg1_ems_mode_selection_raw')|is_number and
            states('sensor.sg1_battery_forced_charge_discharge_mode_raw')|is_number and
            states('sensor.sg1_battery_power_raw')|is_number and
            states('sensor.sg1_total_dc_power')|is_number and
            states('sensor.sg1_load_power')|is_number )
          }}
        state: >-
          {% if states('sensor.sg1_running_state')|is_number %}
            {# use available sensor running_state #}
            {% if states('sensor.sg1_running_state')|int(default=0)|bitwise_and(0x4) > 0 %}
              on
            {% else %}
              off
            {% endif %}
          {% else %}
            {# workaround for SH*RS inverters without working running_state #}
            {% if (states('sensor.sg1_ems_mode_selection') ) == "Forced mode" %}
              {# EMS forced mode #}
              {% if (states('sensor.sg1_battery_forced_charge_discharge_mode') == "Forced discharge") %}
                {# in mode Forced discharge #}
                {% if (states('sensor.sg1_battery_power_raw')|int > 0 ) %}
                  {# power flow from/to battery #}
                  on
                {% else %}
                  {# no power flow from/to battery #}
                  off
                {% endif %}
              {% else %}
                {# in EMS mode, but not in mode Forced charge #}
                off
              {% endif %}
            {% else %}
              {# not in EMS forced mode, assuming self consumption mode #}
              {% if ( ( states('sensor.sg1_total_dc_power')|int < states('sensor.sg1_load_power')|int ) ) and states('sensor.sg1_battery_power_raw')|int > 0 %}
                {# more power consumed than generated and some battery power -->  assuming battery discharging #}
                on
              {% else %}
                off
              {% endif %}
            {% endif %}
          {% endif %}

      - name: SG1 Battery discharging delay
        unique_id: uid_sg1_battery_discharging_delay
        availability: "{{states('sensor.uid_sg1_battery_discharging_delay')|is_number }}"
        delay_on:
          seconds: 60
        state: "{{ sg1_battery_discharging_delay }}"

# inserted from basic_template_binary_sensor_sh.yaml
      - name: SG1 PV generating
        unique_id: uid_sg1_pv_generating
        availability: >-
          {{states('sensor.sg1_running_state')|is_number or
            states('sensor.sg1_total_dc_power')|is_number
          }}
        delay_on:
          seconds: 60
        state: >-
          {% if states('sensor.sg1_running_state')|is_number %}
            {# use available sensor running_state #}
            {{ states('sensor.sg1_running_state')|int(default=0)|bitwise_and(0x1) > 0 }}
          {% else %}
            {# workaround for SH*RS inverters without working running_state #}
            {% if states('sensor.sg1_total_dc_power')|int > 0 %}
              on
            {% else %}
              off
            {% endif %}
          {% endif %}
          
      - name: SG1 Exporting power
        unique_id: uid_sg1_exporting_power
        availability: "{{states('sensor.sg1_running_state')|is_number or states('sensor.sg1_export_power_raw')|is_number }}"
        delay_on:
          seconds: 60
        state: >-
          {% if states('sensor.sg1_running_state')|is_number %}
            {# use available sensor running_state #}
            {{ states('sensor.sg1_running_state')|int(default=0)|bitwise_and(0x10) > 0 }}
          {% else %}
            {# workaround for SH*RS inverters without working running_state #}
            {% if states('sensor.sg1_export_power_raw')|int > 0 %}
                on
            {% else %}
                off
            {% endif %}
          {% endif %}

      - name: SG1 Importing power
        unique_id: uid_sg1_importing_power
        availability: "{{states('sensor.sg1_running_state')|is_number or states('sensor.sg1_export_power_raw')|is_number }}"
        delay_on:
          seconds: 60
        state: >-
          {% if states('sensor.sg1_running_state')|is_number %}
            {# use available sensor running_state #}
            {{ states('sensor.sg1_running_state')|int(default=0)|bitwise_and(0x20) > 0 }}
          {% else %}
            {# workaround for SH*RS inverters without working running_state #}
            {% if states('sensor.sg1_export_power_raw')|int < 0 %}
              on
            {% else %}
              off
            {% endif %}
          {% endif %}          

  - sensor:
# inserted from generic_battery_template_sensor.yaml
      # make the sensor battery_forced_charge_discharge_mode more human readable
      # Inverter States from modbus reference manual
      # 0xAA forced charge
      # 0xBB forced discharge
      # 0xCC Stop (default)
      - name: SG1 Battery forced charge discharge mode
        unique_id: uid_sg1_battery_forced_charge_discharge_mode
        state: >-
          {% if ((states('sensor.sg1_battery_forced_charge_discharge_mode_raw') | int(default=0)) == 0x00AA) %}
            Forced charge
          {% elif ((states('sensor.sg1_battery_forced_charge_discharge_mode_raw') | int(default=0))  == 0x00BB) %}
            Forced discharge
          {% elif ((states('sensor.sg1_battery_forced_charge_discharge_mode_raw') | int(default=0))  == 0x00CC) %}
            Stop (default)
          {% else %}
            Unknown - should not see me!
          {% endif %}

      - name: SG1 Signed battery power # positive if charging and negative if discharging
        unique_id: uid_sg1_signed_battery_power
        unit_of_measurement: W
        device_class: power
        state_class: measurement
        availability: >-
          {{ states('binary_sensor.sg1_battery_charging') and
          states('binary_sensor.sg1_battery_discharging') and
          states('sensor.sg1_battery_power_raw')|is_number }}
        state: >-
          {% if is_state('binary_sensor.sg1_battery_charging', 'on') %}
            {{ (states('sensor.sg1_battery_power_raw') | float)}}
          {% elif is_state('binary_sensor.sg1_battery_discharging', 'on') %}
            {{ (states('sensor.sg1_battery_power_raw') | float * -1)}}
          {% else %}
            0
          {% endif %}

      - name: SG1 Battery charging power # positive if charging else zero
        unique_id: uid_sg1_battery_charging_power
        unit_of_measurement: W
        device_class: power
        state_class: measurement
        availability: >-
          {{ states('binary_sensor.sg1_battery_charging') and
          states('sensor.sg1_battery_power_raw')|is_number }}
        state: >-
          {% if is_state('binary_sensor.sg1_battery_charging', 'on') %}
            {{ states('sensor.sg1_battery_power_raw') }}
          {% else %}
            0
          {% endif %}

      - name: SG1 Battery discharging power # positive if discharging else zero
        unique_id: uid_sg1_battery_discharging_power
        unit_of_measurement: W
        device_class: power
        state_class: measurement
        availability: >-
          {{ states('binary_sensor.sg1_battery_charging') and
          states('sensor.sg1_battery_power_raw')|is_number }}
        state: >-
          {% if is_state('binary_sensor.sg1_battery_discharging', 'on') %}
            {{ states('sensor.sg1_battery_power_raw') }}
          {% else %}
            0
          {% endif %}
  
      - name: SG1 Battery level (nominal)
        unique_id: uid_sg1_battery_level_nom
        unit_of_measurement: "%"
        device_class: battery
        state_class: measurement
        availability: >-
          {{
              states('sensor.sg1_battery_level') | is_number and
              states('sensor.sg1_min_soc') | is_number and
              states('sensor.sg1_max_soc') | is_number
          }}
        state: >-
          {% set soc_min = states('sensor.sg1_min_soc') | float %}
          {% set soc_max = states('sensor.sg1_max_soc') | float %}
          {% set soc_cur = states('sensor.sg1_battery_level') | float %}
          {{
            ((soc_min) + ((soc_max - soc_min) * (soc_cur / 100))) | round(1)
          }}

      - name: SG1 Battery charge (nominal)
        unique_id: uid_sg1_battery_charge_nom
        unit_of_measurement: kWh
        device_class: energy
        availability: >-
          {{
              states('sensor.sg1_battery_capacity') | is_number and
              states('sensor.sg1_battery_level_nominal') | is_number
          }}
        state: >-
          {{
            ( states('sensor.sg1_battery_capacity') | float *
            states('sensor.sg1_battery_level_nominal') | float / 100 )| round(1)
          }}

      - name: SG1 Battery charge
        unique_id: uid_sg1_battery_charge
        unit_of_measurement: kWh
        device_class: energy
        availability: >-
          {{
              states('sensor.sg1_battery_capacity') | is_number and
              states('sensor.sg1_battery_level') | is_number and
              states('sensor.sg1_min_soc') | is_number and
              states('sensor.sg1_max_soc') | is_number
          }}
        state: >-
          {{
              states('sensor.sg1_battery_capacity') | float *
                ((states('sensor.sg1_max_soc') | float - states('sensor.sg1_min_soc') | float) *
                states('sensor.sg1_battery_level') | float / 10000) | round(1)
          }}

# inserted from basic_template_sensor.yaml
      - name: SG1 MPPT1 power
        unique_id: uid_sg1_mppt1_power
        unit_of_measurement: W
        device_class: power
        availability: "{{states('sensor.sg1_mppt1_voltage')|is_number and states('sensor.sg1_mppt1_current')|is_number }}"
        state: "{{ (states('sensor.sg1_mppt1_voltage') | float * states('sensor.sg1_mppt1_current') | float) |int }}"

      - name: SG1 MPPT2 power
        unique_id: uid_sg1_mppt2_power
        unit_of_measurement: W
        device_class: power
        availability: "{{states('sensor.sg1_mppt2_voltage')|is_number and states('sensor.sg1_mppt2_current')|is_number }}"
        state: "{{ (states('sensor.sg1_mppt2_voltage') | float * states('sensor.sg1_mppt2_current') | float) |int }}"
        
      - name: SG1 Export power limit mode
        unique_id: uid_sg1_export_power_limit_mode
        state: >-
          {% if ((states('sensor.sg1_export_power_limit_mode_raw') | int(default=0)) == 0x00AA) %}
            Enabled
          {% elif ((states('sensor.sg1_export_power_limit_mode_raw') | int(default=0))  == 0x0055) %}
            Disabled
          {% else %}
            Unknown - should not see me!
          {% endif %}

      # make the sensor ems_selection_raw more human readable
      - name: SG1 EMS mode selection
        unique_id: uid_sg1_ems_mode_selection
        state: >-
          {% if ((states('sensor.sg1_ems_mode_selection_raw') | int(default=0)) == 0) %}
            Self-consumption mode (default)
          {% elif ((states('sensor.sg1_ems_mode_selection_raw') | int(default=0)) == 2) %}
            Forced mode
          {% elif ((states('sensor.sg1_ems_mode_selection_raw') | int(default=0)) == 3) %}
            External EMS
          {% elif ((states('sensor.sg1_ems_mode_selection_raw') | int(default=0)) == 4) %}
            VPP
          {% elif ((states('sensor.sg1_ems_mode_selection_raw') | int(default=0)) == 8) %}
            MicroGrid
          {% else %}
            Unknown - should not see me!
          {% endif %}        

      - name: SG1 Import power # power from grid: positive if importing, else zero
        unique_id: uid_sg1_import_power
        unit_of_measurement: W
        device_class: power
        state_class: measurement
        availability: "{{states('sensor.sg1_export_power_raw')|is_number }}"
        state: >-
          {% if states('sensor.sg1_export_power_raw')|int < 0 %}
            {{ states('sensor.sg1_export_power_raw')|int *-1 }}
          {% else %}
            0
          {% endif %}

      - name: SG1 Export power # power to grid: positive if exporting, else zero
        unique_id: uid_sg1_export_power
        unit_of_measurement: W
        device_class: power
        state_class: measurement
        availability: "{{states('sensor.sg1_export_power_raw')|is_number }}"
        state: >-
          {% if states('sensor.sg1_export_power_raw')|int > 0 %}
            {{ states('sensor.sg1_export_power_raw') }}
          {% else %}
            0
          {% endif %}          

      # Dissipated energy by load (if battery is installed, its loss of energy is also taken into account)
      - name: SG1 Total dissipated energy
        unique_id: uid_sg1_total_dissipated_energy
        unit_of_measurement: kWh
        state_class: total_increasing
        device_class: energy
        availability: "{{states('sensor.sg1_total_pv_generation')|is_number and states('sensor.sg1_total_exported_energy')|is_number and states('sensor.sg1_total_imported_energy')|is_number}}"
        state: >-
          {% if states('sensor.sg1_total_battery_charge')|is_number and states('sensor.sg1_total_battery_discharge')|is_number %}
            {## battery exists, also take the battery loss (charge - discharge) into account ##}
            {{ (states('sensor.sg1_total_pv_generation')|float - states('sensor.sg1_total_exported_energy')|float - states('sensor.sg1_total_imported_energy')|float + states('sensor.sg1_total_battery_charge')|float - states('sensor.sg1_total_battery_discharge')|float)|int }}
          {% else %}
            {## no battery ##}
            {{ (states('sensor.sg1_total_pv_generation')|float - states('sensor.sg1_total_exported_energy')|float - states('sensor.sg1_total_imported_energy')|float )|int }}
          {% endif %}


          
# inserted from basic_template_sensor_sh.yaml
      - name: SG1 Inverter state
        unique_id: uid_sg1_inverter_state
        state: >-
          {% if ((states('sensor.sg1_system_state') | int(default=0)) == 0x0002) %}
            Stop
          {% elif ((states('sensor.sg1_system_state') | int(default=0)) == 0x0008) %}
            Standby
          {% elif ((states('sensor.sg1_system_state') | int(default=0)) == 0x0010) %}
            Initial Standby
          {% elif ((states('sensor.sg1_system_state') | int(default=0)) == 0x0020) %}
            Startup
          {% elif ((states('sensor.sg1_system_state') | int(default=0)) == 0x0040) %}
            Running
          {% elif ((states('sensor.sg1_system_state') | int(default=0)) == 0x0100) %}
            Fault
          {% elif ((states('sensor.sg1_system_state') | int(default=0)) == 0x0400) %}
            Maintain mode
          {% elif ((states('sensor.sg1_system_state') | int(default=0)) == 0x0800) %}
            Forced mode
          {% elif ((states('sensor.sg1_system_state') | int(default=0)) == 0x1000) %}
            Off-grid mode
          {% elif ((states('sensor.sg1_system_state') | int(default=0)) == 0x2501) %}
            Restarting
          {% elif ((states('sensor.sg1_system_state') | int(default=0)) == 0x4000) %}
            External EMS mode
          {% else %}
            Unknown - should not see me!
          {% endif %}

      - name: SG1 Device type
        unique_id: uid_sg1_device_type
        state: >-
          {% if ((states('sensor.sg1_device_type_code') | int(default=0))  == 0x0D06) %}
            SH3K6
          {% elif ((states('sensor.sg1_device_type_code') | int(default=0)) == 0x0D07) %}
            SH4K6
          {% elif ((states('sensor.sg1_device_type_code') | int(default=0)) == 0x0D09) %}
            SH5K-20
          {% elif ((states('sensor.sg1_device_type_code') | int(default=0)) == 0x0D03) %}
            SH5K-V13
          {% elif ((states('sensor.sg1_device_type_code') | int(default=0)) == 0x0D0A) %}
            SH3K6-30
          {% elif ((states('sensor.sg1_device_type_code') | int(default=0)) == 0x0D0B) %}
            SH4K6-30
          {% elif ((states('sensor.sg1_device_type_code') | int(default=0)) == 0x0D0C) %}
            SH5K-30
          {% elif ((states('sensor.sg1_device_type_code') | int(default=0)) == 0x0D17) %}
            SH3.RS
          {% elif ((states('sensor.sg1_device_type_code') | int(default=0)) == 0x0D0D) %}
            SH3.6RS
          {% elif ((states('sensor.sg1_device_type_code') | int(default=0)) == 0x0D18) %}
            SH4.0RS
          {% elif ((states('sensor.sg1_device_type_code') | int(default=0)) == 0x0D0E) %}
            SH4.6RS
          {% elif ((states('sensor.sg1_device_type_code') | int(default=0)) == 0x0D0F) %}
            SH5.0RS
          {% elif ((states('sensor.sg1_device_type_code') | int(default=0)) == 0x0D10) %}
            SH6.0RS
          {% elif ((states('sensor.sg1_device_type_code') | int(default=0)) == 0x0E00) %}
            SH5.0RT
          {% elif ((states('sensor.sg1_device_type_code') | int(default=0)) == 0x0E01) %}
            SH6.0RT
          {% elif ((states('sensor.sg1_device_type_code') | int(default=0)) == 0x0E02) %}
            SH8.0RT
          {% elif ((states('sensor.sg1_device_type_code') | int(default=0)) == 0x0E03) %}
            SH10RT
          {% elif ((states('sensor.sg1_device_type_code') | int(default=0)) == 0x0E10) %}
            SH5.0RT-20
          {% elif ((states('sensor.sg1_device_type_code') | int(default=0)) == 0x0E11) %}
            SH6.0RT-20
          {% elif ((states('sensor.sg1_device_type_code') | int(default=0)) == 0x0E12) %}
            SH8.0RT-20
          {% elif ((states('sensor.sg1_device_type_code') | int(default=0)) == 0x0E13) %}
            SH10RT-20
          {% elif ((states('sensor.sg1_device_type_code') | int(default=0)) == 0x0E0C) %}
            SH5.0RT-V112
          {% elif ((states('sensor.sg1_device_type_code') | int(default=0)) == 0x0E0D) %}
            SH6.0RT-V112
          {% elif ((states('sensor.sg1_device_type_code') | int(default=0)) == 0x0E0E) %}
            SH8.0RT-V112
          {% elif ((states('sensor.sg1_device_type_code') | int(default=0)) == 0x0E0F) %}
            SH10RT-V112
          {% elif ((states('sensor.sg1_device_type_code') | int(default=0)) == 0x0E08) %}
            SH5.0RT-V122
          {% elif ((states('sensor.sg1_device_type_code') | int(default=0)) == 0x0E09) %}
            SH6.0RT-V122
          {% elif ((states('sensor.sg1_device_type_code') | int(default=0)) == 0x0E0A) %}
            SH8.0RT-V122
          {% elif ((states('sensor.sg1_device_type_code') | int(default=0)) == 0x0E0B) %}
            SH10RT-V122
          {% else %}
            Unknown device code!
          {% endif %}
 
input_number:
# inserted from generic_battery_input_number.yaml
  sg1_set_battery_min_soc:
    name: SG1 Set min SoC
    min: 0
    max: 50
    step: 1

  sg1_set_battery_max_soc:
    name: SG1 Set max SoC
    min: 50
    max: 100
    step: 1

  sg1_set_battery_reserved_soc_for_backup:
    name: SG1 Set reserved SoC for backup
    min: 0
    max: 75
    step: 1

  sg1_set_battery_forced_charge_discharge_power:
    name: SG1 Set forced charge discharge power
    min: 0
    max: !secret sungrow_sg1_max_forced_power
    step: 100

  sg1_set_battery_max_charge_power:
    name: SG1 Set max battery charge power
    min: 100
    max: !secret sungrow_sg1_max_charge_power
    step: 100

  sg1_set_battery_max_discharge_power:
    name: SG1 Set max battery discharge power
    min: 100
    max: !secret sungrow_sg1_max_discharge_power
    step: 100

  sg1_set_battery_charging_start_power:
    name: SG1 Set battery charging start power
    min: 0
    max: 1000
    step: 10

  sg1_set_battery_discharging_start_power:
    name: SG1 Set battery discharging start power
    min: 0
    max: 1000
    step: 10
# inserted from basic_input_number.yaml
  set_sg1_export_power_limit:
    name: SG1 Set export power limit
    min: 0
    max: !secret sungrow_sg1_max_export_limit
    step: 100

input_select:
# inserted from generic_battery_input_select.yaml
  set_sg1_battery_forced_charge_discharge_mode:
    name: SG1 Battery forced charge discharge mode
    options:
      - "Stop (default)"
      - "Forced charge"
      - "Forced discharge"
    icon: mdi:battery-unknown
# inserted from basic_input_select.yaml
  set_sg1_inverter_run_mode:
    name: SG1 Inverter mode
    options:
      - "Enabled"
      - "Shutdown"
    
  # get input for battery mode (forced charge/discharge, stop (default) )
  set_sg1_ems_mode:
    name: SG1 EMS mode
    options:
      - "Self-consumption mode (default)"
      - "Forced mode"
      - "External EMS" # for multiple inverters
    # these are commented, because they are rarely used
    #      - "VPP"
    #      - "MicroGrid"
    icon: mdi:battery-unknown      
    
    
  set_sg1_export_power_limit_mode:
    name: SG1 Export power limit mode
    options:
      - "Enabled"
      - "Disabled"
    icon: mdi:export    
    
automation:
# inserted from generic_battery_automation.yaml
  - id: "uid_sg1_set_max_soc_reg"
    alias: "SG1 Set max SoC reg"
    description: "SG1 Set max Soc"
    trigger:
      - platform: state
        entity_id:
          - input_number.set_sg1_set_battery_max_soc
    condition: []
    action:
      - service: modbus.write_register
        data_template:
          hub: Sungrow_Inverter_SG1
          slave: !secret sungrow_sg1_modbus_slave
          address: 13057 # reg 13058
          value: "{{ states('input_number.set_sg1_set_battery_max_soc') | int *10}}"
    mode: single

  - id: "uid_sg1_set_battery_max_soc_gui_update"
    alias: "SG1 Max SoC GUI update"
    description: "SG1 max Soc GUI update"
    trigger:
      - platform: state
        entity_id:
          - sensor.sg1_set_battery_max_soc
    condition: []
    action:
      - service: input_number.set_value
        target:
          entity_id: input_number.set_sg1_set_battery_max_soc
        data:
          value: "{{ states('sensor.sg1_set_battery_max_soc') }}"
    mode: single

  - id: "uid_sg1_set_min_soc_reg"
    alias: "SG1 Set min SoC reg"
    description: "SG1 set min Soc"
    trigger:
      - platform: state
        entity_id:
          - input_number.set_sg1_set_battery_min_soc
    condition: []
    action:
      - service: modbus.write_register
        data_template:
          hub: Sungrow_Inverter_SG1
          slave: !secret sungrow_sg1_modbus_slave
          address: 13058 # reg 13059
          value: "{{ states('input_number.set_sg1_set_battery_min_soc') | int *10}}"
    mode: single

  - id: "uid_sg1_set_battery_min_soc_gui_update"
    alias: "SG1 Min SoC GUI update"
    description: "SG1 min Soc GUI update"
    trigger:
      - platform: state
        entity_id:
          - sensor.sg1_set_battery_min_soc
    condition: []
    action:
      - service: input_number.set_value
        target:
          entity_id: input_number.set_sg1_set_battery_min_soc
        data:
          value: "{{ states('sensor.sg1_set_battery_min_soc') }}"
    mode: single

  - id: "uid_sg1_set_battery_reserved_soc_for_backup_reg"
    alias: "SG1 Set reserved soc for backup reg"
    description: "SG1 set reserved SoC for backup"
    trigger:
      - platform: state
        entity_id:
          - input_number.sg1_set_battery_reserved_soc_for_backup
    condition: []
    action:
      - service: modbus.write_register
        data_template:
          hub: Sungrow_Inverter_SG1
          slave: !secret sungrow_sg1_modbus_slave
          address: 13099 # reg 13100
          value: "{{ states('input_number.sg1_set_battery_reserved_soc_for_backup') | int}}"
    mode: single

  - id: "uid_sg1_set_reserved_soc_for_backup_gui_update"
    alias: "SG1 Reserved backup SoC GUI update"
    description: "SG1 reserved backup Soc GUI update"
    trigger:
      - platform: state
        entity_id:
          - sensor.sg1_reserved_soc_for_backup
    condition: []
    action:
      - service: input_number.set_value
        target:
          entity_id: input_number.sg1_set_battery_reserved_soc_for_backup
        data:
          value: "{{ states('sensor.sg1_reserved_soc_for_backup') }}"
    mode: single

  - id: "uid_sg1_set_battery_forced_charge_discharge_mode_reg"
    alias: "SG1 Set battery forced charge discharge mode reg"
    description: "SG1 battery forced charge discharge mode"
    trigger:
      - platform: state
        entity_id:
          - input_select.set_sg1_battery_forced_charge_discharge_mode
    condition: []
    variables:
      ems_forced_charge: 0xAA
      ems_forced_discharge: 0xBB
      ems_stop_default: 0xCC
    action:
      - service: modbus.write_register
        data_template:
          hub: Sungrow_Inverter_SG1
          slave: !secret sungrow_sg1_modbus_slave
          address: 13050 # reg 13051
          value: >
            {% if is_state('input_select.set_sg1_battery_forced_charge_discharge_mode', "Stop (default)") %} 
              {{ems_stop_default}}
            {% elif is_state('input_select.set_sg1_battery_forced_charge_discharge_mode', "Forced charge") %} 
              {{ems_forced_charge}}
            {% elif is_state('input_select.set_sg1_battery_forced_charge_discharge_mode', "Forced discharge") %} 
              {{ems_forced_discharge}}
            {% else %}
              {{ems_stop_default}}
            {% endif %}
    mode: single

  - id: "uid_sg1_battery_forced_charge_discharge_mode_input_select_gui_update"
    alias: "SG1 Battery forced charge discharge mode input select GUI update"
    description: "SG1 battery forced charge discharge mode input select GUI update"
    trigger:
      - platform: state
        entity_id:
          - sensor.sg1_battery_forced_charge_discharge_mode
    condition: []
    action:
      - service: input_select.select_option
        target:
          entity_id: input_select.set_sg1_battery_forced_charge_discharge_mode
        data:
          option: "{{ states('sensor.sg1_battery_forced_charge_discharge_mode') }}"
    mode: single
    
    

  - id: "uid_sg1_set_battery_forced_charge_discharge_power_reg"
    alias: "SG1 Set battery forced charge discharge power reg"
    description: "SG1 sets battery forced charge discharge power"
    trigger:
      - platform: state
        entity_id:
          - input_number.sg1_set_battery_forced_charge_discharge_power
    condition: []
    action:
      - service: modbus.write_register
        data_template:
          hub: Sungrow_Inverter_SG1
          slave: !secret sungrow_sg1_modbus_slave
          address: 13051 # reg 13052
          value: "{{ states('input_number.sg1_set_battery_forced_charge_discharge_power') | int}}"
    mode: single

  - id: "uid_sg1_battery_forced_charge_discharge_power_gui_update"
    alias: "SG1 Battery forced charge discharge power GUI update"
    description: "SG1 battery forced charge discharge power GUI update"
    trigger:
      - platform: state
        entity_id:
          - sensor.sg1_battery_forced_charge_discharge_power
    condition:
      - condition: template
        value_template: "{{ not is_state('sensor.sg1_battery_forced_charge_discharge_power', 'unavailable') }}"
    action:
      - service: input_number.set_value
        target:
          entity_id: input_number.sg1_set_battery_forced_charge_discharge_power
        data:
          value: "{{ states('sensor.sg1_battery_forced_charge_discharge_power') }}"
    mode: single

  - id: "uid_sg1_set_battery_max_charge_power_reg"
    alias: "SG1 Set battery max charge power reg"
    description: "SG1 sets battery max charge power"
    trigger:
      - platform: state
        entity_id:
          - input_number.sg1_set_battery_max_charge_power
    condition: []
    action:
      - service: modbus.write_register
        data_template:
          hub: Sungrow_Inverter_SG1
          slave: !secret sungrow_sg1_modbus_slave
          address: 33046 # reg 33047
          value: "{{ states('input_number.sg1_set_battery_max_charge_power')  |float /10 |int}}"
    mode: single

  - id: "uid_sg1_battery_max_charge_power_gui_update"
    alias: "SG1 Battery max charge power GUI update"
    description: "SG1 battery max charge power GUI update"
    trigger:
      - platform: state
        entity_id:
          - sensor.sg1_battery_max_charge_power
    condition: []
    action:
      - service: input_number.set_value
        target:
          entity_id: input_number.sg1_set_battery_max_charge_power
        data:
          value: "{{ states('sensor.sg1_battery_max_charge_power') }}"
    mode: single

  - id: "uid_sg1_set_battery_max_discharge_power_reg"
    alias: "SG1 Set battery max discharge power reg"
    description: "SG1 sets battery max discharge power"
    trigger:
      - platform: state
        entity_id:
          - input_number.sg1_set_battery_max_discharge_power
    condition: []
    action:
      - service: modbus.write_register
        data_template:
          hub: Sungrow_Inverter_SG1
          slave: !secret sungrow_sg1_modbus_slave
          address: 33047 # reg 33048
          value: "{{ states('input_number.sg1_set_battery_max_discharge_power')  |float /10 |int}}"
    mode: single

  - id: "uid_sg1_battery_max_discharge_power_gui_update"
    alias: "SG1 Battery max discharge power GUI update"
    description: "SG1 battery max discharge power GUI update"
    trigger:
      - platform: state
        entity_id:
          - sensor.sg1_battery_max_discharge_power
    condition: []
    action:
      - service: input_number.set_value
        target:
          entity_id: input_number.sg1_set_battery_max_discharge_power
        data:
          value: "{{ states('sensor.sg1_battery_max_discharge_power') }}"
    mode: single

  - id: "uid_sg1_set_battery_charging_start_power_reg"
    alias: "SG1 Set battery charging start power reg"
    description: "SG1 Sets battery charging start power"
    trigger:
      - platform: state
        entity_id:
          - input_number.sg1_set_battery_charging_start_power
    condition: []
    action:
      - service: modbus.write_register
        data_template:
          hub: Sungrow_Inverter_SG1
          slave: !secret sungrow_sg1_modbus_slave
          address: 33148 # reg 33149
          value: "{{ states('input_number.sg1_set_battery_charging_start_power') |float /10 |int}}"
    mode: single

  - id: "uid_sg1_battery_charging_start_power_gui_update"
    alias: "SG1 Battery charging start power GUI update"
    description: "SG1 battery charging start power GUI update"
    trigger:
      - platform: state
        entity_id:
          - sensor.sg1_battery_charging_start_power
    condition: []
    action:
      - service: input_number.set_value
        target:
          entity_id: input_number.set_sg1_battery_discharging_start_power
        data:
          value: "{{ states('sensor.sg1_battery_charging_start_power') }}"
    mode: single

  - id: "uid_sg1_set_battery_discharging_start_power_reg"
    alias: "SG1 Set battery discharging start power reg"
    description: "SG1 Sets battery discharging start power"
    trigger:
      - platform: state
        entity_id:
          - input_number.set_sg1_battery_discharging_start_power
    condition: []
    action:
      - service: modbus.write_register
        data_template:
          hub: Sungrow_Inverter_SG1
          slave: !secret sungrow_sg1_modbus_slave
          address: 33149 # reg 33150
          value: "{{ states('input_number.set_sg1_battery_discharging_start_power') |float /10 | int}}"
    mode: single

  - id: "uid_sg1_battery_discharging_start_power_gui_update"
    alias: "SG1 battery discharging start power GUI update"
    description: "SG1 battery discharging start power GUI update"
    trigger:
      - platform: state
        entity_id:
          - sensor.sg1_battery_discharging_start_power
    condition: []
    action:
      - service: input_number.set_value
        target:
          entity_id: input_number.set_sg1_battery_discharging_start_power
        data:
          value: "{{ states('sensor.sg1_battery_discharging_start_power') }}"
    mode: single
# inserted from basic_automation.yaml
  - id: "uid_sg1_set_run_mode_reg"
    alias: "SG1 Set run mode reg"
    description: "SG1 enables/ stops the inverter"
    trigger:
      - platform: state
        entity_id:
          - input_select.set_sg1_inverter_run_mode
    condition: []
    variables:
      sg_start: 0xCF
      sg_stop: 0xCE
    action:
      - service: modbus.write_register
        data_template:
          hub: Sungrow_Inverter_SG1
          slave: !secret sungrow_sg1_modbus_slave
          address: 12999 # reg 13000
          value: >
            {% if is_state('input_select.set_sg1_inverter_run_mode', "Enabled") %}
              {{sg_start}}
            {% else %}
              {{sg_stop}}
            {% endif %}
    mode: single

  - id: "uid_sg1_run_mode_gui_update"
    alias: "SG1 run mode GUI update"
    description: "SG1 run mode GUI update"
    trigger:
      - platform: state
        entity_id:
          - sensor.sg1_system_state
    condition:
      - condition: template
        value_template: "{{ not is_state('sensor.sg1_system_state', 'unavailable') }}"
    action:
      - service: input_select.select_option
        target:
          entity_id: input_select.set_sg1_inverter_run_mode
        data:
          option: >
            {% if is_state('sensor.sg1_sungrow_inverter_state', "Stop") %}
              Shutdown
            {% else %}
              Enabled
            {% endif %}
    mode: single
    

  - id: "uid_sg1_set_ems_mode_reg"
    alias: "SG1 Set EMS mode reg"
    description: "SG1 set EMS mode reg"
    trigger:
      - platform: state
        entity_id:
          - input_select.set_sg1_ems_mode
    condition: []
    variables:
      ems_mode_self_consume: 0
      ems_mode_forced: 2
      ems_mode_external: 3
      ems_mode_vpp: 4
      ems_mode_microgrid: 8
    action:
      - service: modbus.write_register
        data_template:
          hub: Sungrow_Inverter_SG1
          slave: !secret sungrow_sg1_modbus_slave
          address: 13049 # reg 13050
          value: >
            {% if is_state('input_select.set_sg1_ems_mode', "Self-consumption mode (default)") %} 
              {{ems_mode_self_consume}}
            {% elif is_state('input_select.set_sg1_ems_mode', "Forced mode") %} 
              {{ems_mode_forced}}
            {% elif is_state('input_select.set_sg1_ems_mode', "External EMS") %} 
              {{ems_mode_external}}
            {% elif is_state('input_select.set_sg1_ems_mode', "VPP") %} 
              {{ems_mode_vpp}}
            {% elif is_state('input_select.set_sg1_ems_mode', "MicroGrid") %} 
              {{ems_mode_microgrid}}
            {% else %}
              {{ems_mode_self_consume}}
            {% endif %}
    mode: single

  - id: "uid_sg1_ems_mode_gui_update"
    alias: "SG1 EMS mode GUI update"
    description: "SG1 EMS mode GUI update"
    trigger:
      - platform: state
        entity_id:
          - sensor.sg1_ems_mode_selection
    condition:
      - condition: template
        value_template: "{{ not is_state('sensor.sg1_ems_mode_selection', 'unavailable') }}"
    action:
      - service: input_select.select_option
        target:
          entity_id: input_select.set_sg1_ems_mode
        data:
          option: "{{ states('sensor.sg1_ems_mode_selection') }}"
    mode: single

  - id: "uid_sg1_set_export_power_limit_mode_reg"
    alias: "SG1 Export power limit mode reg"
    description: "SG1 Set export power limit mode"
    trigger:
      - platform: state
        entity_id:
          - input_select.set_sg1_export_power_limit_mode
    condition: []
    variables:
      export_limit_enable: 0xAA
      export_limit_disable: 0x55
    action:
      - service: modbus.write_register
        data_template:
          hub: Sungrow_Inverter_SG1
          slave: !secret sungrow_sg1_modbus_slave
          address: 13086 # reg 13087
          value: >
            {% if is_state('input_select.set_sg1_export_power_limit_mode', "Enabled") %} 
              {{export_limit_enable}}
            {% elif is_state('input_select.set_sg1_export_power_limit_mode', "Disabled") %} 
              {{export_limit_disable}}
            {% else %}
              {{export_limit_disable}}
            {% endif %}
    mode: single

  - id: "uid_sg1_export_power_limit_mode_gui_update"
    alias: "SG1 export power limit mode gui update"
    description: "SG1 export power limit mode GUI Update"
    trigger:
      - platform: state
        entity_id:
          - sensor.sg1_export_power_limit_mode_raw
    condition:
      - condition: template
        value_template: "{{ not is_state('sensor.sg1_export_power_limit_mode_raw', 'unavailable') }}"
    action:
      - service: input_select.select_option
        target:
          entity_id: input_select.set_sg1_export_power_limit_mode
        data:
          option: >
            {% if ((states('sensor.sg1_export_power_limit_mode_raw') | int(default=0)) == 0x00AA) %} 
              Enabled
            {% elif ((states('sensor.sg1_export_power_limit_mode_raw') | int(default=0)) == 0x0055) %} 
              Disabled
            {% endif %}
    mode: single

  - id: "uid_sg1_set_export_power_limit_reg"
    alias: "SG1 Export power limit reg"
    description: "SG1 set export power limit"
    trigger:
      - platform: state
        entity_id:
          - input_number.set_sg1_export_power_limit
    condition: []
    action:
      - service: modbus.write_register
        data_template:
          hub: Sungrow_Inverter_SG1
          slave: !secret sungrow_sg1_modbus_slave
          address: 13073 # reg 13074
          value: "{{ states('input_number.set_sg1_export_power_limit') }}"
    mode: single

  - id: "uid_sg1_export_power_limit_gui_update"
    alias: "SG1 export power limit gui update"
    description: "SG1 export power limit gui update"
    trigger:
      - platform: state
        entity_id:
          - sensor.sg1_export_power_limit
    condition: []
    action:
      - service: input_number.set_value
        target:
          entity_id: input_number.set_sg1_export_power_limit
        data:
          value: "{{ states('sensor.sg1_export_power_limit') }}"
    mode: single    
