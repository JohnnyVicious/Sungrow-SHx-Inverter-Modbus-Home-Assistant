  - id: "uid_sg1_set_max_soc_reg"
    alias: "SG1 set max SoC reg"
    description: "SG1 set max Soc"
    trigger:
      - platform: state
        entity_id:
          - input_number.set_sg1_max_soc
    condition: []
    action:
      - service: modbus.write_register
        data_template:
          hub: Sungrow_Inverter_SG1
          slave: !secret sungrow_sg1_modbus_slave
          address: 13057 # reg 13058
          value: "{{ states('input_number.set_sg1_max_soc') | int *10}}"
    mode: single

  - id: "uid_sg1_max_soc_gui_update"
    alias: "SG1 max SoC GUI update"
    description: "SG1 max Soc GUI update"
    trigger:
      - platform: state
        entity_id:
          - sensor.sg1_max_soc
    condition: []
    action:
      - service: input_number.set_value
        target:
          entity_id: input_number.set_sg1_max_soc
        data:
          value: "{{ states('sensor.sg1_max_soc') }}"
    mode: single

  - id: "uid_sg1_set_min_soc_reg"
    alias: "SG1 set min SoC reg"
    description: "SG1 set min Soc"
    trigger:
      - platform: state
        entity_id:
          - input_number.set_sg1_min_soc
    condition: []
    action:
      - service: modbus.write_register
        data_template:
          hub: Sungrow_Inverter_SG1
          slave: !secret sungrow_sg1_modbus_slave
          address: 13058 # reg 13059
          value: "{{ states('input_number.set_sg1_min_soc') | int *10}}"
    mode: single

  - id: "uid_sg1_min_soc_gui_update"
    alias: "SG1 min SoC GUI update"
    description: "SG1 min Soc GUI update"
    trigger:
      - platform: state
        entity_id:
          - sensor.sg1_min_soc
    condition: []
    action:
      - service: input_number.set_value
        target:
          entity_id: input_number.set_sg1_min_soc
        data:
          value: "{{ states('sensor.sg1_min_soc') }}"
    mode: single

  - id: "uid_sg1_set_reserved_soc_for_backup_reg"
    alias: "SG1 set reserved soc for backup reg"
    description: "SG1 set reserved SoC for backup"
    trigger:
      - platform: state
        entity_id:
          - input_number.set_sg1_reserved_soc_for_backup
    condition: []
    action:
      - service: modbus.write_register
        data_template:
          hub: Sungrow_Inverter_SG1
          slave: !secret sungrow_sg1_modbus_slave
          address: 13099 # reg 13100
          value: "{{ states('input_number.set_sg1_reserved_soc_for_backup') | int}}"
    mode: single

  - id: "uid_sg1_set_reserved_soc_for_backup_gui_update"
    alias: "SG1 reserved backup SoC GUI update"
    description: "SG1 reserved backup Soc GUI update"
    trigger:
      - platform: state
        entity_id:
          - sensor.sg1_reserved_soc_for_backup
    condition: []
    action:
      - service: input_number.set_value
        target:
          entity_id: input_number.set_sg1_reserved_soc_for_backup
        data:
          value: "{{ states('sensor.sg1_reserved_soc_for_backup') }}"
    mode: single

  - id: "uid_sg1_set_battery_forced_charge_discharge_mode_reg"
    alias: "SG1 set battery forced charge discharge mode reg"
    description: "SG1 battery forced charge discharge mode"
    trigger:
      - platform: state
        entity_id:
          - input_select.set_sg1_battery_forced_charge_discharge_mode
    condition: []
    variables:
      ems_forced_charge: 0xAA
      ems_forced_discharge: 0xBB
      ems_stop_default: 0xCC
    action:
      - service: modbus.write_register
        data_template:
          hub: Sungrow_Inverter_SG1
          slave: !secret sungrow_sg1_modbus_slave
          address: 13050 # reg 13051
          value: >
            {% if is_state('input_select.set_sg1_battery_forced_charge_discharge_mode', "Stop (default)") %} 
              {{ems_stop_default}}
            {% elif is_state('input_select.set_sg1_battery_forced_charge_discharge_mode', "Forced charge") %} 
              {{ems_forced_charge}}
            {% elif is_state('input_select.set_sg1_battery_forced_charge_discharge_mode', "Forced discharge") %} 
              {{ems_forced_discharge}}
            {% else %}
              {{ems_stop_default}}
            {% endif %}
    mode: single

  - id: "uid_sg1_battery_forced_charge_discharge_mode_input_select_gui_update"
    alias: "SG1 battery forced charge discharge mode input select GUI update"
    description: "SG1 battery forced charge discharge mode input select GUI update"
    trigger:
      - platform: state
        entity_id:
          - sensor.sg1_battery_forced_charge_discharge_mode
    condition: []
    action:
      - service: input_select.select_option
        target:
          entity_id: input_select.set_sg1_battery_forced_charge_discharge_mode
        data:
          option: "{{ states('sensor.sg1_battery_forced_charge_discharge_mode') }}"
    mode: single
    
    

  - id: "uid_sg1_set_battery_forced_charge_discharge_power_reg"
    alias: "SG1 set battery forced charge discharge power reg"
    description: "SG1 sets battery forced charge discharge power"
    trigger:
      - platform: state
        entity_id:
          - input_number.set_sg1_forced_charge_discharge_power
    condition: []
    action:
      - service: modbus.write_register
        data_template:
          hub: Sungrow_Inverter_SG1
          slave: !secret sungrow_sg1_modbus_slave
          address: 13051 # reg 13052
          value: "{{ states('input_number.set_sg1_forced_charge_discharge_power') | int}}"
    mode: single

  - id: "uid_sg1_battery_forced_charge_discharge_power_gui_update"
    alias: "SG1 battery forced charge discharge power GUI update"
    description: "SG1 battery forced charge discharge power GUI update"
    trigger:
      - platform: state
        entity_id:
          - sensor.sg1_battery_forced_charge_discharge_power
    condition:
      - condition: template
        value_template: "{{ not is_state('sensor.sg1_battery_forced_charge_discharge_power', 'unavailable') }}"
    action:
      - service: input_number.set_value
        target:
          entity_id: input_number.set_sg1_forced_charge_discharge_power
        data:
          value: "{{ states('sensor.sg1_battery_forced_charge_discharge_power') }}"
    mode: single

  - id: "uid_sg1_set_battery_max_charge_power_reg"
    alias: "SG1 set battery max charge power reg"
    description: "SG1 sets battery max charge power"
    trigger:
      - platform: state
        entity_id:
          - input_number.set_sg1_battery_max_charge_power
    condition: []
    action:
      - service: modbus.write_register
        data_template:
          hub: Sungrow_Inverter_SG1
          slave: !secret sungrow_sg1_modbus_slave
          address: 33046 # reg 33047
          value: "{{ states('input_number.set_sg1_battery_max_charge_power')  |float /10 |int}}"
    mode: single

  - id: "uid_sg1_battery_max_charge_power_gui_update"
    alias: "SG1 battery max charge power GUI update"
    description: "SG1 battery max charge power GUI update"
    trigger:
      - platform: state
        entity_id:
          - sensor.sg1_battery_max_charge_power
    condition: []
    action:
      - service: input_number.set_value
        target:
          entity_id: input_number.set_sg1_battery_max_charge_power
        data:
          value: "{{ states('sensor.sg1_battery_max_charge_power') }}"
    mode: single

  - id: "uid_sg1_set_battery_max_discharge_power_reg"
    alias: "SG1 set battery max discharge power reg"
    description: "SG1 sets battery max discharge power"
    trigger:
      - platform: state
        entity_id:
          - input_number.set_sg1_battery_max_discharge_power
    condition: []
    action:
      - service: modbus.write_register
        data_template:
          hub: Sungrow_Inverter_SG1
          slave: !secret sungrow_sg1_modbus_slave
          address: 33047 # reg 33048
          value: "{{ states('input_number.set_sg1_battery_max_discharge_power')  |float /10 |int}}"
    mode: single

  - id: "uid_sg1_battery_max_discharge_power_gui_update"
    alias: "SG1 battery max discharge power GUI update"
    description: "SG1 battery max discharge power GUI update"
    trigger:
      - platform: state
        entity_id:
          - sensor.sg1_battery_max_discharge_power
    condition: []
    action:
      - service: input_number.set_value
        target:
          entity_id: input_number.set_sg1_battery_max_discharge_power
        data:
          value: "{{ states('sensor.sg1_battery_max_discharge_power') }}"
    mode: single

  - id: "uid_sg1_set_battery_charging_start_power_reg"
    alias: "SG1 set battery charging start power reg"
    description: "SG1 Sets battery charging start power"
    trigger:
      - platform: state
        entity_id:
          - input_number.set_sg1_battery_charging_start_power
    condition: []
    action:
      - service: modbus.write_register
        data_template:
          hub: Sungrow_Inverter_SG1
          slave: !secret sungrow_sg1_modbus_slave
          address: 33148 # reg 33149
          value: "{{ states('input_number.set_sg1_battery_charging_start_power') |float /10 |int}}"
    mode: single

  - id: "uid_sg1_battery_charging_start_power_gui_update"
    alias: "SG1 battery charging start power GUI update"
    description: "SG1 battery charging start power GUI update"
    trigger:
      - platform: state
        entity_id:
          - sensor.sg1_battery_charging_start_power
    condition: []
    action:
      - service: input_number.set_value
        target:
          entity_id: input_number.set_sg1_battery_charging_start_power
        data:
          value: "{{ states('sensor.sg1_battery_charging_start_power') }}"
    mode: single

  - id: "uid_sg1_set_battery_discharging_start_power_reg"
    alias: "SG1 set battery discharging start power reg"
    description: "SG1 Sets battery discharging start power"
    trigger:
      - platform: state
        entity_id:
          - input_number.set_sg1_battery_discharging_start_power
    condition: []
    action:
      - service: modbus.write_register
        data_template:
          hub: Sungrow_Inverter_SG1
          slave: !secret sungrow_sg1_modbus_slave
          address: 33149 # reg 33150
          value: "{{ states('input_number.set_sg1_battery_discharging_start_power') |float /10 | int}}"
    mode: single

  - id: "uid_sg1_battery_discharging_start_power_gui_update"
    alias: "SG1 battery discharging start power GUI update"
    description: "SG1 battery discharging start power GUI update"
    trigger:
      - platform: state
        entity_id:
          - sensor.sg1_battery_discharging_start_power
    condition: []
    action:
      - service: input_number.set_value
        target:
          entity_id: input_number.set_sg1_battery_discharging_start_power
        data:
          value: "{{ states('sensor.sg1_battery_discharging_start_power') }}"
    mode: single
